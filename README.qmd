---
format: gfm
execute:
  freeze: auto
highlight-style: github  
knitr: 
  opts_chunk: 
    crop: !expr 'rlang::check_installed("magick")'
    comment: "#>"
    fig.path: "man/figures/README-"
    out.width: "100%"
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

# tidynorm <a href="https://jofrhwld.github.io/tidynorm/"><img src="man/figures/logo.png" alt="tidynorm website" align="right" height="138"/></a>

<!-- badges: start -->

[![R-CMD-check](https://github.com/JoFrhwld/tidynorm/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/JoFrhwld/tidynorm/actions/workflows/R-CMD-check.yaml) [![CRAN status](https://www.r-pkg.org/badges/version/tidynorm)](https://CRAN.R-project.org/package=tidynorm)

<!-- badges: end -->

The goal of `{tidynorm}` is to provide convenient and tidy functions to normalize vowel formant data.

## Installation

You can install tidynorm like so

``` r
install.packages("tidynorm")
```

You can install the development version of tidynorm like so:

``` r
## if you need to install `remotes`
# install.packages("remotes")
remotes::install_github("jofrhwld/tidynorm")
```

```{r}
#| eval: !expr 'rlang::is_installed("magick")'
#| echo: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
set.seed(200)
```

## Example

Vowel formant frequencies are heavily influenced by vocal tract length differences between speakers.
Equivalent vowels between speakers can have dramatically different frequency locations.

```{r}
library(tidynorm)
library(ggplot2)
```

```{r}
#| code-fold: true
#| code-summary: Plotting Options

options(
  ggplot2.discrete.colour = c(
    lapply(
      1:6,
      \(x) c(
        "#4477AA", "#EE6677", "#228833",
        "#CCBB44", "#66CCEE", "#AA3377"
      )[1:x]
    )
  ),
  ggplot2.discrete.fill = c(
    lapply(
      1:6,
      \(x) c(
        "#4477AA", "#EE6677", "#228833",
        "#CCBB44", "#66CCEE", "#AA3377"
      )[1:x]
    )
  )
)

theme_set(
  theme_minimal(
    base_size = 16
  )
)
```

```{r}
#| code-fold: true
#| code-summary: Plotting Code
#| label: unnorm
#| fig-alt: |
#|   A two dimensional density plot of speakers s01 and s02's vowel
#|   formant data. They are both roughly triangular, but s02's
#|   vowel space is smaller, and shifted up and back relative to 
#|   s01's.
#| fig-align: center
#| out-width: 80%
#| eval: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
#| include: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
ggplot(
  speaker_data,
  aes(
    F2, F1,
    color = speaker
  )
) +
  ggdensity::stat_hdr(
    probs = c(0.95, 0.8, 0.5),
    alpha = 1,
    fill = NA,
    linewidth = 1
  ) +
  scale_x_reverse() +
  scale_y_reverse() +
  coord_fixed() +
  labs(
    title = "unnormalized"
  )
```

The goal of `{tidynorm}` is to provide tidyverse-friendly and familiar functions that will allow you to quickly normalize vowel formant data.
There are a number of built in functions based on conventional normalization methods.

```{r}
speaker_data |>
  norm_nearey(
    F1:F3,
    .by = speaker,
    .names = "{.formant}_nearey"
  ) ->
speaker_normalized
```

```{r}
#| code-fold: true
#| code-summary: Plotting Code
#| label: norm
#| fig-alt: |
#|   A two dimensional density plot of speakers s01 and s02's vowel
#|   formant data. They are both roughly triangular, and highly
#|   overlapping.
#| fig-align: center
#| out-width: 60%
#| eval: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
#| include: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
speaker_normalized |>
  ggplot(
    aes(
      F2_nearey, F1_nearey,
      color = speaker
    )
  ) +
  ggdensity::stat_hdr(
    probs = c(0.95, 0.8, 0.5),
    alpha = 1,
    fill = NA,
    linewidth = 1
  ) +
  scale_x_reverse() +
  scale_y_reverse() +
  coord_fixed() +
  labs(
    title = "Nearey Normalized"
  )
```

There is also a `tidynorm::norm_generic()` function to allow you to define your own bespoke normalization methods.
For example, a "robust Nearey" normalization method using the median, instead of the mean, could be done like so.

```{r}
speaker_rnearey <- speaker_data |>
  norm_generic(
    F1:F3,
    .by = speaker,
    .by_formant = FALSE,
    .pre_trans = log,
    .L = median(.formant, na.rm = T),
    .names = "{.formant}_rnearey"
  )
```

```{r}
#| code-fold: true
#| code-summary: Plotting Code
#| label: rnorm
#| fig-alt: |
#|   A two dimensional density plot of speakers s01 and s02's vowel
#|   formant data. They are both roughly triangular, and highly
#|   overlapping.
#| fig-align: center
#| out-width: 60%
#| eval: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
#| include: !expr 'rlang::is_installed(c("ggplot2", "ggdensity"))'
speaker_rnearey |>
  ggplot(
    aes(
      F2_rnearey, F1_rnearey,
      color = speaker
    )
  ) +
  ggdensity::stat_hdr(
    probs = c(0.95, 0.8, 0.5),
    alpha = 1,
    fill = NA,
    linewidth = 1
  ) +
  scale_x_reverse() +
  scale_y_reverse() +
  coord_fixed() +
  labs(
    title = "Robust Nearey Normalized"
  )
```

